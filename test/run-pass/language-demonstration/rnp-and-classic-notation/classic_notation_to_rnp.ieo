export rnp;

import utility:bal

# rnp for expressions made with (,),+,*,a,b,c


fun rnp(input) {
    Expression(input);
}

# Expression = Component "+" Expression | Component
fun Expression(in) {
    
    position = bal("+", in, "(", ")");
    if (position) {
        first_case_l = Component(cut(0, position, in);
        first_case_r = Expression(cut(position + 1, len(in), in);
        if (first_case_l and first_case_r) {
            return first_case_l + first_case_r + "+";
    } 

    # second_case
    Component(in);
}

# Component = Factor "*" Component | Factor
fun Component(in) {
    # first_case
    let position = bal("*", in, "(", ")");
    if (position) {
        first_case_l = Factor(cut(0, position, in);
        first_case_r = Component(cut(position + 1, len(in), in);
        if (first_case_l and first_case_r) {
            return first_case_l + first_case_r + "*";
    } 

    # second_case
    Factor(in);
}

# Factor = Identity | "(" Expression ")"
fun Factor(in) {
    len = len(in);

    # first_case
    if (len == 1) { return Identity(in); }

    # second_case
    second_case = Expression(cut(position + 1, len - 1, in));
    if (cut(0, 1, in) == "("
        and second_case
        and (cut(len - 1, len, in) == ")") {
            return second_case;
    } 
    fail None;
}

# Identity = "a" | "b" | "c"
fun Identity(in) {
	if (in == "a" or in == "b" or in == "c") { return in }
    fail None;
}
